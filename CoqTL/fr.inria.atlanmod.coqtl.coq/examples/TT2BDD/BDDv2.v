
(********************************************************************
	@name Coq declarations for metamodel: <bdd>
	@date 2019/06/10 19:46:39
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import String.
Require Import List.      (* sequence *)
Require Import Multiset.  (* bag *)
Require Import ListSet.   (* set *)
Require Import Omega.
Require Import Bool.

Require Import core.utils.Utils.
Require Import core.Metamodel.
Require Import core.Model.

Require Import Coq.Logic.Eqdep_dec.

(* Base types *)
Inductive BDD : Set :=
  BuildBDD :
  (* id *) string ->
  (* name *) string ->
  BDD.

Inductive InputPort : Set :=
  BuildInputPort :
  (* id *) string ->
  (* name *) string ->
  InputPort.
  
Inductive OutputPort : Set :=
  BuildOutputPort :
  (* id *) string ->
  (* name *) string ->
  OutputPort.

Inductive Leaf : Set :=
  BuildLeaf :
  (* id *) string ->
  Leaf.

Inductive Subtree : Set :=
  BuildSubtree :
  (* id *) string ->
  Subtree.

Inductive Assignment : Set :=
  BuildAssignment :
  (* id *) string ->
  (* value *) bool ->
  Assignment.

(* Port-types *)
Inductive Port_EClass : Set :=
  | InputPortEClass
  | OutputPortEClass
.

Definition Port_getTypeByEClass (arg : Port_EClass) : Set :=
  match arg with
    | InputPortEClass => InputPort
    | OutputPortEClass => OutputPort
  end.

Inductive Port : Set :=
  | Build_Abstract_Port : 
    forall (arg: Port_EClass), 
      (Port_getTypeByEClass arg) -> Port.

Inductive Tree_EClass : Set :=
  | LeafEClass
  | SubtreeEClass
.

Definition Tree_getTypeByEClass (arg : Tree_EClass) : Set :=
  match arg with
    | LeafEClass => Leaf
    | SubtreeEClass => Subtree
  end.

Inductive Tree : Set :=
  | Build_Abstract_Tree : 
    forall (arg: Tree_EClass), 
      (Tree_getTypeByEClass arg) -> Tree.


Inductive BDDPorts : Set :=
   BuildBDDPorts :
   BDD ->
   list Port ->
   BDDPorts.
Inductive BDDTree : Set :=
   BuildBDDTree :
   BDD ->
   Tree ->
   BDDTree.
Inductive BDDTrees : Set :=
   BuildBDDTrees :
   BDD ->
   list Tree ->
   BDDTrees.

Inductive PortOwner : Set :=
   BuildPortOwner :
   Port ->
   BDD ->
   PortOwner.

Inductive InputPortSubtrees : Set :=
   BuildInputPortSubtrees :
   InputPort ->
   list Subtree ->
   InputPortSubtrees.

Inductive OutputPortAssignments : Set :=
   BuildOutputPortAssignments :
   OutputPort ->
   list Assignment ->
   OutputPortAssignments.

Inductive TreeOwnerBDD : Set :=
   BuildTreeOwnerBDD :
   Tree ->
   BDD ->
   TreeOwnerBDD.
Inductive TreeOwnerSubtreeForZero : Set :=
   BuildTreeOwnerSubtreeForZero :
   Tree ->
   list Subtree ->
   TreeOwnerSubtreeForZero.
Inductive TreeOwnerSubtreeForOne : Set :=
   BuildTreeOwnerSubtreeForOne :
   Tree ->
   list Subtree ->
   TreeOwnerSubtreeForOne.

Inductive LeafAssignments : Set :=
   BuildLeafAssignments :
   Leaf ->
   list Assignment ->
   LeafAssignments.

Inductive AssignmentPort : Set :=
   BuildAssignmentPort :
   Assignment ->
   OutputPort ->
   AssignmentPort.
Inductive AssignmentOwner : Set :=
   BuildAssignmentOwner :
   Assignment ->
   Leaf ->
   AssignmentOwner.

Inductive SubtreePort : Set :=
   BuildSubtreePort :
   Subtree ->
   InputPort ->
   SubtreePort.
Inductive SubtreeTreeForZero : Set :=
   BuildSubtreeTreeForZero :
   Subtree ->
   Tree ->
   SubtreeTreeForZero.
Inductive SubtreeTreeForOne : Set :=
   BuildSubtreeTreeForOne :
   Subtree ->
   Tree ->
   SubtreeTreeForOne.



(* Accessors *)
Definition BDD_getId (b : BDD) : string :=
  match b with BuildBDD  id name  => id end.
Definition BDD_getName (b : BDD) : string :=
  match b with BuildBDD  id name  => name end.
 
Definition InputPort_getId (i : InputPort) : string :=
  match i with BuildInputPort id name  => id end.
Definition InputPort_getName (i : InputPort) : string :=
  match i with BuildInputPort id name  => name end.

Definition OutputPort_getId (o : OutputPort) : string :=
  match o with BuildOutputPort id name  => id end.
Definition OutputPort_getName (o : OutputPort) : string :=
  match o with BuildOutputPort id name  => name end. 


Definition Leaf_getId (l : Leaf) : string :=
  match l with BuildLeaf id  => id end.

Definition Subtree_getId (s : Subtree) : string :=
  match s with BuildSubtree id  => id end.

Definition Assignment_getId (a : Assignment) : string :=
  match a with BuildAssignment  id value  => id end.
Definition Assignment_getValue (a : Assignment) : bool :=
  match a with BuildAssignment  id value  => value end.
 
Definition Port_getId (p : Port) : string :=
  match p with 
    | Build_Abstract_Port InputPortEClass (BuildInputPort id name)  => id 
    | Build_Abstract_Port OutputPortEClass (BuildOutputPort id name) => id
  end.
Definition Port_getName (p : Port) : string :=
  match p with 
    | Build_Abstract_Port InputPortEClass (BuildInputPort id name)  => name 
    | Build_Abstract_Port OutputPortEClass (BuildOutputPort id name) => name
  end.

Definition Tree_getId (t : Tree) : string :=
  match t with 
    | Build_Abstract_Tree LeafEClass (BuildLeaf id)  => id 
    | Build_Abstract_Tree SubtreeEClass (BuildSubtree id) => id
  end.

		
(* Meta-types *)
Inductive bddMetamodel_EClass : Set :=
  | BDDEClass
  | PortEClass
  | TreeEClass
  | AssignmentEClass
.

Definition bddMetamodel_getTypeByEClass (bdec_arg : bddMetamodel_EClass) : Set :=
  match bdec_arg with
    | BDDEClass => BDD
    | PortEClass => Port
    | TreeEClass => Tree
    | AssignmentEClass => Assignment
  end.	


Inductive bddMetamodel_EReference : Set :=
| BDDPortsEReference
| BDDTreeEReference
| BDDTreesEReference
| PortOwnerEReference
| InputPortSubtreesEReference
| OutputPortAssignmentsEReference
| TreeOwnerBDDEReference
| TreeOwnerSubtreeForZeroEReference
| TreeOwnerSubtreeForOneEReference
| LeafAssignmentsEReference
| AssignmentPortEReference
| AssignmentOwnerEReference
| SubtreePortEReference
| SubtreeTreeForZeroEReference
| SubtreeTreeForOneEReference
.

Definition bddMetamodel_getTypeByEReference (bder_arg : bddMetamodel_EReference) : Set :=
  match bder_arg with
| BDDPortsEReference => BDDPorts
| BDDTreeEReference => BDDTree
| BDDTreesEReference => BDDTrees
| PortOwnerEReference => PortOwner
| InputPortSubtreesEReference => InputPortSubtrees
| OutputPortAssignmentsEReference => OutputPortAssignments
| TreeOwnerBDDEReference => TreeOwnerBDD
| TreeOwnerSubtreeForZeroEReference => TreeOwnerSubtreeForZero
| TreeOwnerSubtreeForOneEReference => TreeOwnerSubtreeForOne
| LeafAssignmentsEReference => LeafAssignments
| AssignmentPortEReference => AssignmentPort
| AssignmentOwnerEReference => AssignmentOwner
| SubtreePortEReference => SubtreePort
| SubtreeTreeForZeroEReference => SubtreeTreeForZero
| SubtreeTreeForOneEReference => SubtreeTreeForOne
  end.

(* Generic types *)

Inductive bddMetamodel_EObject : Set :=
 | Build_bddMetamodel_EObject : 
    forall (bdec_arg: bddMetamodel_EClass), (bddMetamodel_getTypeByEClass bdec_arg) -> bddMetamodel_EObject.

Inductive bddMetamodel_ELink : Set :=
 | Build_bddMetamodel_ELink : 
    forall (bder_arg:bddMetamodel_EReference), (bddMetamodel_getTypeByEReference bder_arg) -> bddMetamodel_ELink.

(* Reflective functions *)

Lemma bddMetamodel_eqEClass_dec : 
 forall (bdec_arg1:bddMetamodel_EClass) (bdec_arg2:bddMetamodel_EClass), { bdec_arg1 = bdec_arg2 } + { bdec_arg1 <> bdec_arg2 }.
Proof. repeat decide equality. Defined.

Lemma bddMetamodel_eqEReference_dec : 
 forall (bder_arg1:bddMetamodel_EReference) (bder_arg2:bddMetamodel_EReference), { bder_arg1 = bder_arg2 } + { bder_arg1 <> bder_arg2 }.
Proof. repeat decide equality. Defined.

Definition bddMetamodel_getEClass (bdeo_arg : bddMetamodel_EObject) : bddMetamodel_EClass :=
   match bdeo_arg with
  | (Build_bddMetamodel_EObject bdeo_arg _) => bdeo_arg
   end.

Definition bddMetamodel_getEReference (bdel_arg : bddMetamodel_ELink) : bddMetamodel_EReference :=
   match bdel_arg with
  | (Build_bddMetamodel_ELink bdel_arg _) => bdel_arg
   end.

Definition bddMetamodel_instanceOfEClass (bdec_arg: bddMetamodel_EClass) (bdeo_arg : bddMetamodel_EObject): bool :=
  if bddMetamodel_eqEClass_dec (bddMetamodel_getEClass bdeo_arg) bdec_arg then true else false.

Definition bddMetamodel_instanceOfEReference (bder_arg: bddMetamodel_EReference) (bdel_arg : bddMetamodel_ELink): bool :=
  if bddMetamodel_eqEReference_dec (bddMetamodel_getEReference bdel_arg) bder_arg then true else false.


Definition bddMetamodel_toEClass (bdec_arg : bddMetamodel_EClass) (bdeo_arg : bddMetamodel_EObject) : option (bddMetamodel_getTypeByEClass bdec_arg).
Proof.
  destruct bdeo_arg as [arg1 arg2].
  destruct (bddMetamodel_eqEClass_dec arg1 bdec_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Definition bddMetamodel_toEReference (bder_arg : bddMetamodel_EReference) (bdel_arg : bddMetamodel_ELink) : option (bddMetamodel_getTypeByEReference bder_arg).
Proof.
  destruct bdel_arg as [arg1 arg2].
  destruct (bddMetamodel_eqEReference_dec arg1 bder_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
  	exact (Some arg2).
  - exact None.
Defined.

Lemma TTMetamodel_eqPortEClass_dec : 
 forall (ttec_arg1:Port_EClass) (ttec_arg2:Port_EClass), { ttec_arg1 = ttec_arg2 } + { ttec_arg1 <> ttec_arg2 }.
Proof. repeat decide equality. Defined.

Lemma TTMetamodel_eqTreeEClass_dec : 
 forall (ttec_arg1:Tree_EClass) (ttec_arg2:Tree_EClass), { ttec_arg1 = ttec_arg2 } + { ttec_arg1 <> ttec_arg2 }.
Proof. repeat decide equality. Defined.

(* Generic functions *)
Definition bddMetamodel_toEObjectFromBDD (bd_arg :BDD) : bddMetamodel_EObject :=
  (Build_bddMetamodel_EObject BDDEClass bd_arg).
Coercion bddMetamodel_toEObjectFromBDD : BDD >-> bddMetamodel_EObject.

Definition bddMetamodel_toEObjectFromPort (po_arg :Port) : bddMetamodel_EObject :=
  (Build_bddMetamodel_EObject PortEClass po_arg).
Coercion bddMetamodel_toEObjectFromPort : Port >-> bddMetamodel_EObject.

Definition bddMetamodel_toEObjectFromTree (tr_arg :Tree) : bddMetamodel_EObject :=
  (Build_bddMetamodel_EObject TreeEClass tr_arg).
Coercion bddMetamodel_toEObjectFromTree : Tree >-> bddMetamodel_EObject.

Definition bddMetamodel_toEObjectFromAssignment (as_arg :Assignment) : bddMetamodel_EObject :=
  (Build_bddMetamodel_EObject AssignmentEClass as_arg).
Coercion bddMetamodel_toEObjectFromAssignment : Assignment >-> bddMetamodel_EObject.


(** Metamodel Type Class Instaniation **)
Definition bddMetamodel_toEObject (bdeo_arg : bddMetamodel_EObject) : bddMetamodel_EObject := bdeo_arg.
Definition bddMetamodel_toELink (bdel_arg : bddMetamodel_ELink) : bddMetamodel_ELink := bdel_arg.
Definition bddModel := Model bddMetamodel_EObject bddMetamodel_ELink.

Definition bddMetamodel_toEObjectOfEClass (bdec_arg: bddMetamodel_EClass) (t: bddMetamodel_getTypeByEClass bdec_arg) : bddMetamodel_EObject :=
  (Build_bddMetamodel_EObject bdec_arg t).

Definition bddMetamodel_toELinkOfEReference (bder_arg: bddMetamodel_EReference) (t: bddMetamodel_getTypeByEReference bder_arg) : bddMetamodel_ELink :=
		  (Build_bddMetamodel_ELink bder_arg t).


(* Accessors on model *)
(* Equality for Types *)

Definition beq_BDD (bd_arg1 : BDD) (bd_arg2 : BDD) : bool :=
( beq_string (BDD_getId bd_arg1) (BDD_getId bd_arg2) ) &&
( beq_string (BDD_getName bd_arg1) (BDD_getName bd_arg2) )
.

Definition beq_InputPort (in_arg1 : InputPort) (in_arg2 : InputPort) : bool :=
beq_string (InputPort_getId in_arg1) (InputPort_getId in_arg2) &&
beq_string (InputPort_getName in_arg1) (InputPort_getName in_arg2)
.

Definition beq_OutputPort (ou_arg1 : OutputPort) (ou_arg2 : OutputPort) : bool :=
beq_string (OutputPort_getId ou_arg1) (OutputPort_getId ou_arg2) &&
beq_string (OutputPort_getName ou_arg1) (OutputPort_getName ou_arg2)
.

Definition beq_Leaf (le_arg1 : Leaf) (le_arg2 : Leaf) : bool :=
beq_string (Leaf_getId le_arg1) (Leaf_getId le_arg2)
.

Definition beq_Subtree (su_arg1 : Subtree) (su_arg2 : Subtree) : bool :=
beq_string (Subtree_getId su_arg1) (Subtree_getId su_arg2)
.

Definition beq_Assignment (as_arg1 : Assignment) (as_arg2 : Assignment) : bool :=
( beq_string (Assignment_getId as_arg1) (Assignment_getId as_arg2) ) &&
( beq_bool (Assignment_getValue as_arg1) (Assignment_getValue as_arg2) )
.



Definition beq_Port (po_arg1 : Port) (po_arg2 : Port) : bool :=
  match po_arg1, po_arg2 with
  | Build_Abstract_Port InputPortEClass i1, Build_Abstract_Port InputPortEClass i2 =>
      ( beq_InputPort i1 i2)
  | Build_Abstract_Port OutputPortEClass o1, Build_Abstract_Port OutputPortEClass o2 =>
      ( beq_OutputPort o1 o2) 
  | _,_ => false
  end.

Definition beq_Tree (tr_arg1 : Tree) (tr_arg2 : Tree) : bool :=
  match tr_arg1, tr_arg2 with
  | Build_Abstract_Tree LeafEClass t1, Build_Abstract_Tree LeafEClass t2 =>
      ( beq_Leaf t1 t2)
  | Build_Abstract_Tree SubtreeEClass s1, Build_Abstract_Tree SubtreeEClass s2 =>
      ( beq_Subtree s1 s2) 
  | _,_ => false
  end.

Definition TTMetamodel_Port_DownCast (ttec_arg : Port_EClass) (tteo_arg : Port) : option (Port_getTypeByEClass ttec_arg).
Proof.
  destruct tteo_arg as [arg1 arg2].
  destruct (TTMetamodel_eqPortEClass_dec arg1 ttec_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Definition TTMetamodel_Tree_DownCast (ttec_arg : Tree_EClass) (tteo_arg : Tree) : option (Tree_getTypeByEClass ttec_arg).
Proof.
  destruct tteo_arg as [arg1 arg2].
  destruct (TTMetamodel_eqTreeEClass_dec arg1 ttec_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Fixpoint BDD_getPortsOnLinks (bd_arg : BDD) (l : list bddMetamodel_ELink) : option (list Port) :=
match l with
| (Build_bddMetamodel_ELink BDDPortsEReference (BuildBDDPorts BDD_ctr ports_ctr)) :: l' => 
	  if beq_BDD BDD_ctr bd_arg then Some ports_ctr else BDD_getPortsOnLinks bd_arg l'
| _ :: l' => BDD_getPortsOnLinks bd_arg l'
| nil => None
end.

Definition BDD_getPorts (bd_arg : BDD) (m : bddModel) : option (list Port) :=
  BDD_getPortsOnLinks bd_arg (@allModelLinks _ _ m).
Fixpoint BDD_getTreeOnLinks (bd_arg : BDD) (l : list bddMetamodel_ELink) : option (Tree) :=
match l with
| (Build_bddMetamodel_ELink BDDTreeEReference (BuildBDDTree BDD_ctr tree_ctr)) :: l' => 
	  if beq_BDD BDD_ctr bd_arg then Some tree_ctr else BDD_getTreeOnLinks bd_arg l'
| _ :: l' => BDD_getTreeOnLinks bd_arg l'
| nil => None
end.

Definition BDD_getTree (bd_arg : BDD) (m : bddModel) : option (Tree) :=
  BDD_getTreeOnLinks bd_arg (@allModelLinks _ _ m).
Fixpoint BDD_getTreesOnLinks (bd_arg : BDD) (l : list bddMetamodel_ELink) : option (list Tree) :=
match l with
| (Build_bddMetamodel_ELink BDDTreesEReference (BuildBDDTrees BDD_ctr trees_ctr)) :: l' => 
	  if beq_BDD BDD_ctr bd_arg then Some trees_ctr else BDD_getTreesOnLinks bd_arg l'
| _ :: l' => BDD_getTreesOnLinks bd_arg l'
| nil => None
end.

Definition BDD_getTrees (bd_arg : BDD) (m : bddModel) : option (list Tree) :=
  BDD_getTreesOnLinks bd_arg (@allModelLinks _ _ m).

Fixpoint Port_getOwnerOnLinks (po_arg : Port) (l : list bddMetamodel_ELink) : option (BDD) :=
match l with
| (Build_bddMetamodel_ELink PortOwnerEReference (BuildPortOwner Port_ctr owner_ctr)) :: l' => 
	  if beq_Port Port_ctr po_arg then Some owner_ctr else Port_getOwnerOnLinks po_arg l'
| _ :: l' => Port_getOwnerOnLinks po_arg l'
| nil => None
end.

Definition Port_getOwner (po_arg : Port) (m : bddModel) : option (BDD) :=
  Port_getOwnerOnLinks po_arg (@allModelLinks _ _ m).

Fixpoint InputPort_getSubtreesOnLinks (in_arg : InputPort) (l : list bddMetamodel_ELink) : option (list Subtree) :=
match l with
| (Build_bddMetamodel_ELink InputPortSubtreesEReference (BuildInputPortSubtrees InputPort_ctr subtrees_ctr)) :: l' => 
	  if beq_InputPort InputPort_ctr in_arg then Some subtrees_ctr else InputPort_getSubtreesOnLinks in_arg l'
| _ :: l' => InputPort_getSubtreesOnLinks in_arg l'
| nil => None
end.

Definition InputPort_getSubtrees (in_arg : InputPort) (m : bddModel) : option (list Subtree) :=
  InputPort_getSubtreesOnLinks in_arg (@allModelLinks _ _ m).

Fixpoint OutputPort_getAssignmentsOnLinks (ou_arg : OutputPort) (l : list bddMetamodel_ELink) : option (list Assignment) :=
match l with
| (Build_bddMetamodel_ELink OutputPortAssignmentsEReference (BuildOutputPortAssignments OutputPort_ctr assignments_ctr)) :: l' => 
	  if beq_OutputPort OutputPort_ctr ou_arg then Some assignments_ctr else OutputPort_getAssignmentsOnLinks ou_arg l'
| _ :: l' => OutputPort_getAssignmentsOnLinks ou_arg l'
| nil => None
end.

Definition OutputPort_getAssignments (ou_arg : OutputPort) (m : bddModel) : option (list Assignment) :=
  OutputPort_getAssignmentsOnLinks ou_arg (@allModelLinks _ _ m).

Fixpoint Tree_getOwnerBDDOnLinks (tr_arg : Tree) (l : list bddMetamodel_ELink) : option (BDD) :=
match l with
| (Build_bddMetamodel_ELink TreeOwnerBDDEReference (BuildTreeOwnerBDD Tree_ctr ownerBDD_ctr)) :: l' => 
	  if beq_Tree Tree_ctr tr_arg then Some ownerBDD_ctr else Tree_getOwnerBDDOnLinks tr_arg l'
| _ :: l' => Tree_getOwnerBDDOnLinks tr_arg l'
| nil => None
end.

Definition Tree_getOwnerBDD (tr_arg : Tree) (m : bddModel) : option (BDD) :=
  Tree_getOwnerBDDOnLinks tr_arg (@allModelLinks _ _ m).
Fixpoint Tree_getOwnerSubtreeForZeroOnLinks (tr_arg : Tree) (l : list bddMetamodel_ELink) : option (list Subtree) :=
match l with
| (Build_bddMetamodel_ELink TreeOwnerSubtreeForZeroEReference (BuildTreeOwnerSubtreeForZero Tree_ctr ownerSubtreeForZero_ctr)) :: l' => 
	  if beq_Tree Tree_ctr tr_arg then Some ownerSubtreeForZero_ctr else Tree_getOwnerSubtreeForZeroOnLinks tr_arg l'
| _ :: l' => Tree_getOwnerSubtreeForZeroOnLinks tr_arg l'
| nil => None
end.

Definition Tree_getOwnerSubtreeForZero (tr_arg : Tree) (m : bddModel) : option (list Subtree) :=
  Tree_getOwnerSubtreeForZeroOnLinks tr_arg (@allModelLinks _ _ m).
Fixpoint Tree_getOwnerSubtreeForOneOnLinks (tr_arg : Tree) (l : list bddMetamodel_ELink) : option (list Subtree) :=
match l with
| (Build_bddMetamodel_ELink TreeOwnerSubtreeForOneEReference (BuildTreeOwnerSubtreeForOne Tree_ctr ownerSubtreeForOne_ctr)) :: l' => 
	  if beq_Tree Tree_ctr tr_arg then Some ownerSubtreeForOne_ctr else Tree_getOwnerSubtreeForOneOnLinks tr_arg l'
| _ :: l' => Tree_getOwnerSubtreeForOneOnLinks tr_arg l'
| nil => None
end.

Definition Tree_getOwnerSubtreeForOne (tr_arg : Tree) (m : bddModel) : option (list Subtree) :=
  Tree_getOwnerSubtreeForOneOnLinks tr_arg (@allModelLinks _ _ m).

Fixpoint Leaf_getAssignmentsOnLinks (le_arg : Leaf) (l : list bddMetamodel_ELink) : option (list Assignment) :=
match l with
| (Build_bddMetamodel_ELink LeafAssignmentsEReference (BuildLeafAssignments Leaf_ctr assignments_ctr)) :: l' => 
	  if beq_Leaf Leaf_ctr le_arg then Some assignments_ctr else Leaf_getAssignmentsOnLinks le_arg l'
| _ :: l' => Leaf_getAssignmentsOnLinks le_arg l'
| nil => None
end.

Definition Leaf_getAssignments (le_arg : Leaf) (m : bddModel) : option (list Assignment) :=
  Leaf_getAssignmentsOnLinks le_arg (@allModelLinks _ _ m).

Fixpoint Assignment_getPortOnLinks (as_arg : Assignment) (l : list bddMetamodel_ELink) : option (OutputPort) :=
match l with
| (Build_bddMetamodel_ELink AssignmentPortEReference (BuildAssignmentPort Assignment_ctr port_ctr)) :: l' => 
	  if beq_Assignment Assignment_ctr as_arg then Some port_ctr else Assignment_getPortOnLinks as_arg l'
| _ :: l' => Assignment_getPortOnLinks as_arg l'
| nil => None
end.

Definition Assignment_getPort (as_arg : Assignment) (m : bddModel) : option (OutputPort) :=
  Assignment_getPortOnLinks as_arg (@allModelLinks _ _ m).
Fixpoint Assignment_getOwnerOnLinks (as_arg : Assignment) (l : list bddMetamodel_ELink) : option (Leaf) :=
match l with
| (Build_bddMetamodel_ELink AssignmentOwnerEReference (BuildAssignmentOwner Assignment_ctr owner_ctr)) :: l' => 
	  if beq_Assignment Assignment_ctr as_arg then Some owner_ctr else Assignment_getOwnerOnLinks as_arg l'
| _ :: l' => Assignment_getOwnerOnLinks as_arg l'
| nil => None
end.

Definition Assignment_getOwner (as_arg : Assignment) (m : bddModel) : option (Leaf) :=
  Assignment_getOwnerOnLinks as_arg (@allModelLinks _ _ m).

Fixpoint Subtree_getPortOnLinks (su_arg : Subtree) (l : list bddMetamodel_ELink) : option (InputPort) :=
match l with
| (Build_bddMetamodel_ELink SubtreePortEReference (BuildSubtreePort Subtree_ctr port_ctr)) :: l' => 
	  if beq_Subtree Subtree_ctr su_arg then Some port_ctr else Subtree_getPortOnLinks su_arg l'
| _ :: l' => Subtree_getPortOnLinks su_arg l'
| nil => None
end.

Definition Subtree_getPort (su_arg : Subtree) (m : bddModel) : option (InputPort) :=
  Subtree_getPortOnLinks su_arg (@allModelLinks _ _ m).
Fixpoint Subtree_getTreeForZeroOnLinks (su_arg : Subtree) (l : list bddMetamodel_ELink) : option (Tree) :=
match l with
| (Build_bddMetamodel_ELink SubtreeTreeForZeroEReference (BuildSubtreeTreeForZero Subtree_ctr treeForZero_ctr)) :: l' => 
	  if beq_Subtree Subtree_ctr su_arg then Some treeForZero_ctr else Subtree_getTreeForZeroOnLinks su_arg l'
| _ :: l' => Subtree_getTreeForZeroOnLinks su_arg l'
| nil => None
end.

Definition Subtree_getTreeForZero (su_arg : Subtree) (m : bddModel) : option (Tree) :=
  Subtree_getTreeForZeroOnLinks su_arg (@allModelLinks _ _ m).
Fixpoint Subtree_getTreeForOneOnLinks (su_arg : Subtree) (l : list bddMetamodel_ELink) : option (Tree) :=
match l with
| (Build_bddMetamodel_ELink SubtreeTreeForOneEReference (BuildSubtreeTreeForOne Subtree_ctr treeForOne_ctr)) :: l' => 
	  if beq_Subtree Subtree_ctr su_arg then Some treeForOne_ctr else Subtree_getTreeForOneOnLinks su_arg l'
| _ :: l' => Subtree_getTreeForOneOnLinks su_arg l'
| nil => None
end.

Definition Subtree_getTreeForOne (su_arg : Subtree) (m : bddModel) : option (Tree) :=
  Subtree_getTreeForOneOnLinks su_arg (@allModelLinks _ _ m).

Definition beq_bddMetamodel_Object (c1 : bddMetamodel_EObject) (c2 : bddMetamodel_EObject) : bool :=
  match c1, c2 with
  | Build_bddMetamodel_EObject BDDEClass o1, Build_bddMetamodel_EObject BDDEClass o2 => beq_BDD o1 o2
  | Build_bddMetamodel_EObject PortEClass o1, Build_bddMetamodel_EObject PortEClass o2 => beq_Port o1 o2
  | Build_bddMetamodel_EObject TreeEClass o1, Build_bddMetamodel_EObject TreeEClass o2 => beq_Tree o1 o2
  | Build_bddMetamodel_EObject AssignmentEClass o1, Build_bddMetamodel_EObject AssignmentEClass o2 => beq_Assignment o1 o2
  | _, _ => false
  end.


(* Typeclass Instance *)
Instance bddMetamodel : Metamodel bddMetamodel_EObject bddMetamodel_ELink bddMetamodel_EClass bddMetamodel_EReference :=
  {
    denoteModelClass := bddMetamodel_getTypeByEClass;
    denoteModelReference := bddMetamodel_getTypeByEReference;
    toModelClass := bddMetamodel_toEClass;
    toModelReference := bddMetamodel_toEReference;
    toModelElement := bddMetamodel_toEObjectOfEClass;
    toModelLink := bddMetamodel_toELinkOfEReference;
    beq_ModelElement := beq_bddMetamodel_Object;

    (* Theorems *)
    eqModelClass_dec := bddMetamodel_eqEClass_dec;
    eqModelReference_dec := bddMetamodel_eqEReference_dec;

  }.


